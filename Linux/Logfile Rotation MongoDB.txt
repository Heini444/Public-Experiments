#As mentioned in the section about Linux’s logrotation utility, you need to create a separate config file #/etc/logrotate.d/mongod.conf for MongoDB’s log file rotation. Add the content shown below into that config file:

sudo nano /etc/mongod.conf
systemLog:
  destination: file
  logAppend: true
  path: /var/log/mongodb/mongod.log
  logRotate: reopen
processManagement: 
  pidFilePath: /var/run/mongodb/mongod.pid
--------------------------------------------------------------------------------------------------------------------

logrotate-mongod.conf
/var/log/unifi/mongod.log {
  daily
  size 1000M
  rotate 7
  missingok
  compress
  delaycompress
  notifempty
  create 640 mongod mongod
  sharedscripts
  postrotate
    /bin/kill -SIGUSR1 `cat /var/run/mongodb/mongod.pid 2>/dev/null` >/dev/null 2>&1
  endscript
}

In this config file, we assume that log path is set as /var/log/mongodb/mongod.log in /etc/mongod.conf file, and instruct Linux’s logrotation  utility to do the following:

#Check the size, and start rotation if the log file is greater than 1000M
#Move the mongod.log file to mongod.log.1
#Create a new mongod.log file with mongod permissions
#Compress the files from mongod.log.2 but retain up to mongod.log.7 as per delaycompress and rotate 7
#MongoDB continues to write to the old file mongod.log.1 (based on Linux’s inode) – remember that now there is no mongod.log file
#In postrotate, it sends the kill -SIGUSR1 signal to mongod mentioned with the pid file, and thus mongod creates the mongod.log and starts writing to it. So make sure you have the pid file path set to the same as pidFilepath from the /etc/mongod.conf file